<?php

namespace src\database\queries;

use DateTime;
use PDO;
use PDOStatement;
use src\database\Database;
use src\database\queries\Table as TableTrait;
use src\database\queries\Columns as ColumnsTrait;
use src\database\queries\Values as ValuesTrait;
use src\database\queries\Where as WhereTrait;
use src\database\queries\Limit as LimitTrait;
use src\database\queries\Properties as PropertiesTrait;
use src\database\queries\PrimaryKey as PrimaryKeyTrait;
use src\database\querybuilders\MySQL as MySQLQueryBuilder;
use src\database\querybuilders\QueryBuilderInterface;
use src\exceptions\DatabaseException;

class Query
{
    use TableTrait;
    use ColumnsTrait;
    use ValuesTrait;
    use WhereTrait;
    use LimitTrait;
    use PropertiesTrait;
    use PrimaryKeyTrait;

    protected Database $database;

    public function __construct(Database $database)
    {
        $this->database = $database;
    }

    public function select(): PDOStatement
    {
        $queryBuilder = $this->database->getQueryBuilder();
        [$query, $params] = $queryBuilder->select(
            $this->table,
            $this->columns,
            $this->where,
            $this->limit
        );

        return $this->database->exec($query, $params);
    }

    public function selectAssoc(): ?array
    {
        $statement = $this->select();

        return $statement->fetchAll(PDO::FETCH_ASSOC);
    }

    public function selectAssocSingle(): ?array
    {
        $statement = $this->select();

        return $statement->fetch(PDO::FETCH_ASSOC);
    }

    public function count(): int
    {
        $statement = $this->select();

        return $statement->rowCount();
    }

    public function exists(): bool
    {
        $count = $this->count();

        return ($count > 0);
    }

    public function insert(): PDOStatement
    {
        $queryBuilder = $this->database->getQueryBuilder();
        [$query, $params] = $queryBuilder->insert(
            $this->table,
            $this->values
        );

        return $this->database->exec($query, $params);
    }

    public function insertWithLastId(string $primaryKey = null): int
    {
        $statement = $this->insert();

        return $this->database->getLastInsertedId($primaryKey);
    }

    public function update(): PDOStatement
    {
        $queryBuilder = $this->database->getQueryBuilder();
        [$query, $params] = $queryBuilder->update(
            $this->table,
            $this->values,
            $this->where
        );

        return $this->database->exec($query, $params);
    }

    public function delete(): PDOStatement
    {
        $queryBuilder = $this->database->getQueryBuilder();
        [$query, $params] = $queryBuilder->delete(
            $this->table,
            $this->where
        );

        return $this->database->exec($query, $params);
    }

    public function create(): PDOStatement
    {
        $queryBuilder = $this->database->getQueryBuilder();
        [$query, $params] = $queryBuilder->create(
            $this->table,
            $this->properties,
            $this->primaryKey,
            $this->primaryKeyAutoGenerated
        );

        return $this->database->exec($query, $params);
    }

    public static function now(): DateTime
    {
        return new DateTime();
    }
}

?>