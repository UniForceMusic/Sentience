<?php

namespace src\database\queries;

use DateTime;
use PDO;
use PDOStatement;
use src\database\Database;
use src\database\queries\Columns as ColumnsTrait;
use src\database\queries\IfNotExists as IfNotExistsTrait;
use src\database\queries\Join as JoinTrait;
use src\database\queries\Limit as LimitTrait;
use src\database\queries\Offset as OffsetTrait;
use src\database\queries\OrderBy as OrderByTrait;
use src\database\queries\PrimaryKey as PrimaryKeyTrait;
use src\database\queries\Properties as PropertiesTrait;
use src\database\queries\Model as ModelTrait;
use src\database\queries\Table as TableTrait;
use src\database\queries\Values as ValuesTrait;
use src\database\queries\Where as WhereTrait;
use src\exceptions\ModelException;
use src\models\Model;

class Query
{
    public const EQUALS = '=';
    public const NOT_EQUALS = '!=';
    public const LIKE = 'LIKE';
    public const NOT_LIKE = 'NOT LIKE';
    public const IN_ARRAY = 'IN ARRAY';
    public const NOT_IN_ARRAY = 'NOT IN ARRAY';
    public const LESS_THAN = '<';
    public const MORE_THAN = '>';
    public const LESS_THAN_OR_EQUALS = '<=';
    public const MORE_THAN_OR_EQUALS = '>=';

    use ColumnsTrait;
    use IfNotExistsTrait;
    use JoinTrait;
    use LimitTrait;
    use OffsetTrait;
    use OrderByTrait;
    use PrimaryKeyTrait;
    use PropertiesTrait;
    use ModelTrait;
    use TableTrait;
    use ValuesTrait;
    use WhereTrait;

    protected Database $database;

    public function __construct(Database $database)
    {
        $this->database = $database;
    }

    public function select(): PDOStatement
    {
        $queryBuilder = $this->database->getQueryBuilder();
        [$query, $params] = $queryBuilder->select(
            $this->table,
            $this->columns,
            $this->escapeColumns,
            $this->joins,
            $this->where,
            $this->orderBys,
            $this->limit,
            $this->offset
        );

        return $this->database->exec($query, $params);
    }

    public function selectAssoc(): ?array
    {
        $statement = $this->select();

        return $statement->fetchAll(PDO::FETCH_ASSOC);
    }

    public function selectAssocSingle(): ?array
    {
        $statement = $this->select();

        return $statement->fetch(PDO::FETCH_ASSOC);
    }

    public function selectModel(): Model
    {
        if (!$this->model) {
            new ModelException('no model supplied');
        }

        $statement = $this->select();
        $assoc = $statement->fetch(PDO::FETCH_ASSOC);

        $modelName = $this->model;
        $model = new $modelName($this->database);
        return $model->hydrateByAssoc($statement, $assoc);
    }

    public function selectModels(): array
    {
        if (!$this->model) {
            new ModelException('no model supplied');
        }

        $statement = $this->select();
        $assocs = $statement->fetchAll(PDO::FETCH_ASSOC);

        $modelName = $this->model;

        return array_map(
            function (array $assoc) use ($statement, $modelName): Model {
                $model = new $modelName($this->database);
                return $model->hydrateByAssoc($statement, $assoc);
            },
            $assocs
        );
    }

    public function count(): int
    {
        $statement = $this->select();

        return $statement->rowCount();
    }

    public function exists(): bool
    {
        $count = $this->count();

        return ($count > 0);
    }

    public function insert(): PDOStatement
    {
        $queryBuilder = $this->database->getQueryBuilder();
        [$query, $params] = $queryBuilder->insert(
            $this->table,
            $this->values
        );

        return $this->database->exec($query, $params);
    }

    public function insertWithLastId(string $primaryKey = null): int
    {
        $statement = $this->insert();

        return $this->database->getLastInsertedId($primaryKey);
    }

    public function update(): PDOStatement
    {
        $queryBuilder = $this->database->getQueryBuilder();
        [$query, $params] = $queryBuilder->update(
            $this->table,
            $this->values,
            $this->where
        );

        return $this->database->exec($query, $params);
    }

    public function delete(): PDOStatement
    {
        $queryBuilder = $this->database->getQueryBuilder();
        [$query, $params] = $queryBuilder->delete(
            $this->table,
            $this->where
        );

        return $this->database->exec($query, $params);
    }

    public function create(): PDOStatement
    {
        $queryBuilder = $this->database->getQueryBuilder();
        [$query, $params] = $queryBuilder->create(
            $this->table,
            $this->ifNotExists,
            $this->properties,
            $this->primaryKey,
            $this->primaryKeyAutoGenerated,
        );

        return $this->database->exec($query, $params);
    }

    public static function now(): DateTime
    {
        return new DateTime();
    }
}
