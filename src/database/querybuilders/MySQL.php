<?php

namespace src\database\querybuilders;

use src\database\objects\Where;

class MySQL implements QueryBuilderInterface
{
    public function select(string $table, array $columns, array $where, int $limit): array
    {
        $query = '';
        $params = [];

        $query .= 'SELECT ' . $this->generateColumnsString($columns) . ' FROM `' . $table . '` ';

        if (!empty($where)) {
            $query .= 'WHERE ' . $this->generateWhereString($where) . ' ';

            $whereValues = $this->extractWhereValues($where);
            array_push($params, ...$whereValues);
        }

        if ($limit > 0) {
            $query .= 'LIMIT ' . $limit;
        }

        $query = trim($query) . ';';

        return [$query, $params];
    }

    public function insert(string $table, array $values): array
    {
        $query = '';
        $params = array_values($values);

        $query .= 'INSERT INTO `' . $table . '` (' . $this->generateColumnsString(array_keys($values)) . ') VALUES (' . $this->generatePlaceholdersString(count($values)) . ')';

        $query = trim($query) . ';';

        return [$query, $params];
    }

    public function update(string $table, array $values, array $where): array
    {
        $query = '';
        $params = [];

        $query .= 'UPDATE `' . $table . '` SET ' . $this->generateUpdateString($values) . ' ';
        array_push($params, ...array_values($values));

        if (!empty($where)) {
            $query .= 'WHERE ' . $this->generateWhereString($where) . ' ';

            $whereValues = $this->extractWhereValues($where);
            array_push($params, ...$whereValues);
        }

        $query = trim($query) . ';';

        return [$query, $params];
    }

    public function delete(string $table, array $where): array
    {
        $query = '';
        $params = [];

        $query .= 'DELETE FROM `' . $table . '` ';

        if (!empty($where)) {
            $query .= 'WHERE ' . $this->generateWhereString($where) . ' ';

            $whereValues = $this->extractWhereValues($where);
            array_push($params, ...$whereValues);
        }

        return [$query, $params];
    }

    public function create(string $table, array $properties, string $primaryKey, bool $primaryKeyAutoGenerated): array
    {
        $query = '';
        $params = [];

        $query .= 'CREATE TABLE IF NOT EXISTS `' . $table . '` ( ';

        $columns = [];

        $columns[] = sprintf(
            '`%s` %s%s',
            $primaryKey,
            $properties[$primaryKey],
            $primaryKeyAutoGenerated ? ' AUTO_INCREMENT' : ''
        );

        foreach ($properties as $name => $type) {
            if ($name == $primaryKey) {
                continue;
            }

            $columns[] = sprintf(
                '`%s` %s',
                $name,
                $type
            );
        }

        $columns[] = sprintf('PRIMARY KEY (`%s`)', $primaryKey);

        $query .= implode(' , ', $columns);
        $query .= ');';

        return [$query, $params];
    }

    public static function getDatabaseColumnType(string $varType, bool $isPrimaryKey): ?string
    {
        if ($varType == 'string' && $isPrimaryKey) {
            return 'VARCHAR(128)';
        }

        $types = [
            'bool' => 'TINYINT',
            'int' => 'INT',
            'double' => 'DOUBLE',
            'float' => 'FLOAT',
            'string' => 'TEXT',
            'DateTime' => 'DATETIME'
        ];

        return $types[$varType] ?? null;
    }

    protected function generateColumnsString(array $columns): string
    {
        if (empty($columns)) {
            return '*';
        }

        $escapedColumns = array_map(
            function (string $column): string {
                return sprintf('`%s`', $column);
            },
            $columns
        );

        return implode(', ', $escapedColumns);
    }

    protected function generateWhereString(array $whereConditions): string
    {
        $conditions = [];

        foreach ($whereConditions as $where) {
            if (in_array($where, ['AND', 'OR'])) {
                $conditions[] = $where;
                continue;
            }

            if (!$where->escapeKey) {
                $templateString = '`%s` %s ?';
            }

            $templateString = '%s %s ?';

            $conditions[] = sprintf(
                $templateString,
                $where->key,
                $where->comparator
            );
        }

        return implode(' ', $conditions);
    }

    protected function generatePlaceholdersString(int $size): string
    {
        $placeholders = [];

        for ($i = 0; $i < $size; $i++) {
            $placeholders[] = '?';
        }

        return implode(', ', $placeholders);
    }

    protected function generateUpdateString(array $values): string
    {
        $updates = [];

        foreach ($values as $key => $value) {
            $updates[] = sprintf(
                '`%s` = ?',
                $key
            );
        }

        return implode(', ', $updates);
    }

    protected function extractWhereValues(array $whereDTOs): array
    {
        $values = [];

        foreach ($whereDTOs as $whereDTO) {
            if (!($whereDTO instanceof Where)) {
                continue;
            }

            $values[] = $whereDTO->value;
        }

        return $values;
    }
}

?>