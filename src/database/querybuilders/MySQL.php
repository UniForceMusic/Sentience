<?php

namespace src\database\querybuilders;

use DateTime;
use src\database\objects\Join;
use src\database\objects\Where;
use src\database\queries\Query;

class MySQL implements QueryBuilderInterface
{
    public function select(string $table, array $columns, bool $escapeColumns, array $joins, array $where, int $limit): array
    {
        $query = '';
        $params = [];

        $query .= 'SELECT ' . $this->generateColumnsString($columns, $escapeColumns) . ' FROM `' . $table . '` ';

        if (!empty($joins)) {
            $query .= $this->generateJoinsString($table, $joins) . ' ';
        }

        if (!empty($where)) {
            $query .= 'WHERE ' . $this->generateWhereString($where) . ' ';

            $whereValues = $this->extractWhereValues($where);
            array_push($params, ...$whereValues);
        }

        if ($limit > 0) {
            $query .= 'LIMIT ' . $limit;
        }

        $query = trim($query) . ';';

        return [$query, $params];
    }

    public function insert(string $table, array $values): array
    {
        $query = '';
        $params = array_values($values);

        $query .= 'INSERT INTO `' . $table . '` (' . $this->generateColumnsString(array_keys($values), true) . ') VALUES (' . $this->generatePlaceholdersString(count($values)) . ')';

        $query = trim($query) . ';';

        return [$query, $params];
    }

    public function update(string $table, array $values, array $where): array
    {
        $query = '';
        $params = [];

        $query .= 'UPDATE `' . $table . '` SET ' . $this->generateUpdateString($values) . ' ';
        array_push($params, ...array_values($values));

        if (!empty($where)) {
            $query .= 'WHERE ' . $this->generateWhereString($where) . ' ';

            $whereValues = $this->extractWhereValues($where);
            array_push($params, ...$whereValues);
        }

        $query = trim($query) . ';';

        return [$query, $params];
    }

    public function delete(string $table, array $where): array
    {
        $query = '';
        $params = [];

        $query .= 'DELETE FROM `' . $table . '` ';

        if (!empty($where)) {
            $query .= 'WHERE ' . $this->generateWhereString($where) . ' ';

            $whereValues = $this->extractWhereValues($where);
            array_push($params, ...$whereValues);
        }

        return [$query, $params];
    }

    public function create(string $table, array $properties, string $primaryKey, bool $primaryKeyAutoGenerated): array
    {
        $query = '';
        $params = [];

        $query .= 'CREATE TABLE IF NOT EXISTS `' . $table . '` ( ';

        $columns = [];

        $columns[] = sprintf(
            '`%s` %s NOT NULL%s',
            $primaryKey,
            $properties[$primaryKey]->type,
            $primaryKeyAutoGenerated ? ' AUTO_INCREMENT' : ''
        );

        foreach ($properties as $name => $tableField) {
            if ($name == $primaryKey) {
                continue;
            }

            $columns[] = sprintf(
                '`%s` %s %s',
                $name,
                $tableField->type,
                ($tableField->allowsNull ? 'NULL' : 'NOT NULL')
            );
        }

        $columns[] = sprintf('PRIMARY KEY (`%s`)', $primaryKey);

        $query .= implode(' , ', $columns);
        $query .= ');';

        return [$query, $params];
    }

    public function castToDatabase(mixed $value): mixed
    {
        if ($value instanceof DateTime) {
            return $value->format('Y-m-d H:i:s');
        }

        if (is_bool($value)) {
            return ($value) ? 1 : 0;
        }

        return $value;
    }

    public function castFromDatabase(string $nativeType, mixed $value): mixed
    {
        if (is_null($value)) {
            return null;
        }

        if ($nativeType == 'DATETIME') {
            return DateTime::createFromFormat('Y-m-d H:i:s', $value);
        }

        if ($nativeType == 'TINY') {
            return ($value == 1);
        }

        return $value;
    }

    public function getColumnType(string $varType, bool $isPrimaryKey): ?string
    {
        if ($varType == 'string' && $isPrimaryKey) {
            return 'VARCHAR(128)';
        }

        $types = [
            'bool' => 'TINYINT',
            'int' => 'INT',
            'double' => 'DOUBLE',
            'float' => 'FLOAT',
            'string' => 'TEXT',
            'DateTime' => 'DATETIME'
        ];

        return $types[$varType] ?? null;
    }

    public function getColumnWithNamespace(string $table, string $column): string
    {
        return sprintf('`%s`.`%s`', $table, $column);
    }

    protected function generateColumnsString(array $columns, bool $escapeColumns): string
    {
        if (empty($columns)) {
            return '*';
        }

        $escapedColumns = array_map(
            function (string $column) use ($escapeColumns): string {
                return ($escapeColumns)
                    ? sprintf('`%s`', $column)
                    : $column;
            },
            $columns
        );

        return implode(', ', $escapedColumns);
    }

    protected function generateWhereString(array $whereConditions): string
    {
        $conditions = [];

        foreach ($whereConditions as $where) {
            if (in_array($where, ['AND', 'OR'])) {
                $conditions[] = $where;
                continue;
            }

            if (is_null($where->value)) {
                $conditions[] = sprintf(
                    '`%s` %s',
                    $where->key,
                    (($where->comparator == Query::EQUALS) ? 'IS NULL' : 'IS NOT NULL')
                );
                continue;
            }

            if (is_array($where->value)) {
                $conditions[] = sprintf(
                    '`%s` %s (%s)',
                    $where->key,
                    (($where->comparator == Query::IN_ARRAY) ? 'IN' : 'NOT IN'),
                    $this->generatePlaceholdersString(count($where->value))
                );
                continue;
            }

            if ($where->escapeKey) {
                $templateString = '%s %s ?';
            } else {
                $templateString = '`%s` %s ?';
            }

            $conditions[] = sprintf(
                $templateString,
                $where->key,
                $where->comparator
            );
        }

        return implode(' ', $conditions);
    }

    protected function generatePlaceholdersString(int $size): string
    {
        $placeholders = [];

        for ($i = 0; $i < $size; $i++) {
            $placeholders[] = '?';
        }

        return implode(', ', $placeholders);
    }

    protected function generateUpdateString(array $values): string
    {
        $updates = [];

        foreach ($values as $key => $value) {
            $updates[] = sprintf(
                '`%s` = ?',
                $key
            );
        }

        return implode(', ', $updates);
    }

    protected function extractWhereValues(array $whereObjects): array
    {
        $values = [];

        foreach ($whereObjects as $whereObject) {
            if (!($whereObject instanceof Where)) {
                continue;
            }

            if (is_null($whereObject->value)) {
                continue;
            }

            if (is_array($whereObject->value)) {
                array_push($values, ...$whereObject->value);
                continue;
            }

            $values[] = $whereObject->value;
        }

        return $values;
    }

    protected function generateJoinsString(string $parentTable, array $joins): string
    {
        $joinStrings = [];

        foreach ($joins as $join) {
            $joinStrings[] = sprintf(
                '%s `%s` ON `%s`.`%s` = `%s`.`%s`',
                $join->joinType,
                $join->joinTable,
                $parentTable,
                $join->relationTableColumnName,
                $join->joinTable,
                $join->joinTableColumnName
            );
        }

        return implode(' ', $joinStrings);
    }
}
