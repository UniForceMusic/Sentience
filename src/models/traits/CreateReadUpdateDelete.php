<?php

namespace src\models\traits;

use PDO;
use PDOStatement;
use src\database\queries\Query;
use src\exceptions\IdentifierException;

trait CreateReadUpdateDelete
{
    public function hydrate(int|string|null $primaryKeyValue = null): static
    {
        $pkColumnName = $this->getPrimaryKeyColumnName();
        $pkValue = $primaryKeyValue ?? $this->getPrimaryKeyValue();

        $statement = $this->database->query()
            ->table($this->table)
            ->columns(array_values($this->columns))
            ->where(
                $pkColumnName,
                Query::EQUALS,
                $pkValue
            )
            ->select();

        $data = $statement->fetch(PDO::FETCH_ASSOC);

        if (!$data) {
            throw new IdentifierException(sprintf('id: %s does not exist', $pkValue));
        }

        foreach ($data as $key => $value) {
            $type = $this->getColumnType($statement, $data, $key);

            $modelPropertyName = array_search($key, $this->columns);

            if (!$modelPropertyName) {
                continue;
            }

            $this->{$modelPropertyName} = $this->castFromDatabaseToModel($type, $value);
        }

        return $this;
    }

    public function hydrateByColumn(string $column, mixed $value): static
    {
        $statement = $this->database->query()
            ->table($this->table)
            ->columns(array_values($this->columns))
            ->where(
                $column,
                Query::EQUALS,
                $value
            )
            ->select();

        $data = $statement->fetch(PDO::FETCH_ASSOC);

        if (!$data) {
            throw new IdentifierException(sprintf('%s: %s does not exist', $column, $value));
        }

        foreach ($data as $key => $value) {
            $type = $this->getColumnType($statement, $data, $key);

            $modelPropertyName = array_search($key, $this->columns);

            if (!$modelPropertyName) {
                continue;
            }

            $this->{$modelPropertyName} = $this->castFromDatabaseToModel($type, $value);
        }

        return $this;
    }

    public function hydrateByAssoc(PDOStatement $statement, array $data): static
    {
        foreach ($data as $key => $value) {
            $type = $this->getColumnType($statement, $data, $key);

            $modelPropertyName = array_search($key, $this->columns);

            if (!$modelPropertyName) {
                continue;
            }

            $this->{$modelPropertyName} = $this->castFromDatabaseToModel($type, $value);
        }

        return $this;
    }

    public function insert(): ?static
    {
        $this->onInsertOrUpdate();

        $valid = $this->validate();
        if (!$valid) {
            return null;
        }

        $insertableValues = $this->getColumns(!$this->primaryKeyAutoGenerated);

        $query = $this->database->query()
            ->table($this->table)
            ->values($insertableValues);

        if ($this->primaryKeyAutoGenerated) {
            $primaryKeyColumnName = $this->getPrimaryKeyColumnName();
            $insertedId = $query->insertWithLastId($primaryKeyColumnName);

            $this->{$primaryKeyColumnName} = $insertedId;
        } else {
            $query->insert();
        }

        $this->afterInsertUpdateOrDelete();

        return $this;
    }

    public function update(): ?static
    {
        $this->onInsertOrUpdate();

        $valid = $this->validate();
        if (!$valid) {
            return null;
        }

        $updatableValues = $this->getColumns(false);

        $pkColumnName = $this->getPrimaryKeyColumnName();
        $pkValue = $this->getPrimaryKeyValue();

        $this->database->query()
            ->table($this->table)
            ->values($updatableValues)
            ->where(
                $pkColumnName,
                Query::EQUALS,
                $pkValue
            )
            ->update();

        $this->afterInsertUpdateOrDelete();

        return $this;
    }

    public function delete(): static
    {
        $pkColumnName = $this->getPrimaryKeyColumnName();
        $pkValue = $this->getPrimaryKeyValue();

        $this->database->query()
            ->table($this->table)
            ->where(
                $pkColumnName,
                Query::EQUALS,
                $pkValue
            )
            ->delete();

        $this->afterInsertUpdateOrDelete();

        return $this;
    }

    public function undoDelete(): static
    {
        $insertableValues = $this->getColumns(true);

        $this->database->query()
            ->table($this->table)
            ->values($insertableValues)
            ->insert();

        $this->afterInsertUpdateOrDelete();

        return $this;
    }

    protected function onInsertOrUpdate(): void
    {
        /**
         * Override in model
         * 
         * Use this function for properties that should be modified on insert or save
         */
    }

    protected function afterInsertUpdateOrDelete(): void
    {
        /**
         * Override in model
         * 
         * Use this function for operations that should complete after the model is saved
         */
    }
}
