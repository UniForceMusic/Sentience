<?php

namespace src\models\traits;

use PDOStatement;
use ReflectionClass;
use ReflectionProperty;
use src\database\objects\Property;

trait Table
{
    protected string $table = '';
    protected array $columns = [
        '<property name>' => '<column name>'
    ];

    public static function getTable(): ?string
    {
        return (new ReflectionClass(static::class))
            ->getProperty('table')
            ->getDefaultValue();
    }

    public static function getColumnNames(): array
    {
        $columns = (new ReflectionClass(static::class))
            ->getProperty('columns')
            ->getDefaultValue();

        return array_values($columns);
    }

    public function createTable(bool $ifNotExists = false): PDOStatement
    {
        if (!$this->queryBuilder) {
            $this->queryBuilder = $this->database->getQueryBuilder();
        }

        $properties = [];

        foreach ($this->columns as $propertyName => $columnName) {
            $reflectionProperty = new ReflectionProperty($this, $propertyName);

            $type = $reflectionProperty->getType()->getName();
            $allowsNull = $reflectionProperty->getType()->allowsNull();

            $properties[$columnName] = new Property($columnName, $type, $allowsNull);
        }

        $statement = $this->database->query()
            ->table($this->table)
            ->ifNotExists($ifNotExists)
            ->properties($properties)
            ->primaryKey($this->getPrimaryKeyColumnName())
            ->primaryKeyAutoGenerated($this->primaryKeyAutoGenerated)
            ->createTable();

        return $statement;
    }

    public function exportAsRecord(): array
    {
        $data = [];

        foreach ($this->columns as $propertyName => $columnName) {
            if (!(new ReflectionProperty($this, $propertyName))->isInitialized($this)) {
                $data[$columnName] = null;
            }

            $data[$columnName] = $this->castFromModelToDatabase($this->{$propertyName});
        }

        return $data;
    }

    protected function getColumns($includePk = false): array
    {
        $values = [];

        foreach ($this->columns as $propertyName => $columnName) {
            if (
                (!$includePk)
                &&
                ($propertyName == $this->primaryKeyPropertyName)
            ) {
                continue;
            }

            if (!(new ReflectionProperty($this, $propertyName))->isInitialized($this)) {
                continue;
            }

            $this->formatProperty($propertyName);

            $key = $columnName;
            $value = $this->{$propertyName};

            $values[$key] = $value;
        }

        return $values;
    }
}
