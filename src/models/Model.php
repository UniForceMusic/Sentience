<?php

namespace src\models;

use ReflectionProperty;
use src\database\Database;

class Model
{
    protected Database $database;
    protected string $table = '';
    protected string $primaryKeyPropertyName = 'id';
    protected bool $primaryKeyAutoGenerated = true;
    protected array $fields = [
        'id' => 'id'
    ];

    public function __construct(Database $database)
    {
        $this->database = $database;
    }

    public function hydrate(int|string|null $primaryKeyValue = null): static
    {
        $pkColumnName = $this->getPrimaryKeyColumnName();
        $pkValue = $primaryKeyValue ?? $this->getPrimaryKeyValue();

        $data = $this->database->query()
            ->table($this->table)
            ->columns(array_values($this->fields))
            ->where(
                $pkColumnName,
                '=',
                $pkValue
            )
            ->selectAssocSingle();

        foreach ($data as $key => $value) {
            $modelPropertyName = array_search($key, $this->fields);

            if (!$modelPropertyName) {
                continue;
            }

            $this->{$modelPropertyName} = $value;
        }

        return $this;
    }

    public function insert(): static
    {
        $insertableValues = $this->getFields(!$this->primaryKeyAutoGenerated);

        $query = $this->database->query()
            ->table($this->table)
            ->values($insertableValues);

        if ($this->primaryKeyAutoGenerated) {
            $primaryKeyColumnName = $this->getPrimaryKeyColumnName();
            $insertedId = $query->insertWithLastId($primaryKeyColumnName);

            $this->{$primaryKeyColumnName} = $insertedId;
        } else {
            $query->insert();
        }

        return $this;
    }

    public function update(): static
    {
        $updatableValues = $this->getFields(false);

        $pkColumnName = $this->getPrimaryKeyColumnName();
        $pkValue = $this->getPrimaryKeyValue();

        $this->database->query()
            ->table($this->table)
            ->values($updatableValues)
            ->where(
                $pkColumnName,
                '=',
                $pkValue
            )
            ->update();

        return $this;
    }

    public function delete(): static
    {
        $pkColumnName = $this->getPrimaryKeyColumnName();
        $pkValue = $this->getPrimaryKeyValue();

        $this->database->query()
            ->table($this->table)
            ->where(
                $pkColumnName,
                '=',
                $pkValue
            )
            ->delete();

        return $this;
    }

    public function undoDelete(): static
    {
        $insertableValues = $this->getFields(true);

        $this->database->query()
            ->table($this->table)
            ->values($insertableValues)
            ->insert();

        return $this;
    }

    public function getPrimaryKeyColumnName(): int|string
    {
        return $this->fields[$this->primaryKeyPropertyName];
    }

    public function getPrimaryKeyValue(): int|string
    {
        return $this->{$this->primaryKeyPropertyName};
    }

    protected function getFields($includePk = false): array
    {
        $nonPkValues = [];

        foreach ($this->fields as $propertyName => $columnName) {
            if (
                (!$includePk)
                &&
                ($propertyName == $this->primaryKeyPropertyName)
            ) {
                continue;
            }

            if (!(new ReflectionProperty($this, $propertyName))->isInitialized($this)) {
                continue;
            }

            $key = $columnName;
            $value = $this->{$propertyName};

            if (is_null($value)) {
                continue;
            }

            $nonPkValues[$key] = $value;
        }

        return $nonPkValues;
    }
}

?>