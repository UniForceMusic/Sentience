<?php

namespace src\models;

use DateTime;
use PDO;
use PDOStatement;
use ReflectionProperty;
use src\database\Database;
use src\database\queries\Query;
use src\exceptions\InvalidIDException;

class Model
{
    protected Database $database;
    protected string $table = '';
    protected string $primaryKeyPropertyName = 'id';
    protected bool $primaryKeyAutoGenerated = true;
    protected array $fields = [
        'id' => 'id'
    ];

    public function __construct(Database $database)
    {
        $this->database = $database;
    }

    public function hydrate(int|string|null $primaryKeyValue = null): static
    {
        $pkColumnName = $this->getPrimaryKeyColumnName();
        $pkValue = $primaryKeyValue ?? $this->getPrimaryKeyValue();

        $statement = $this->database->query()
            ->table($this->table)
            ->columns(array_values($this->fields))
            ->where(
                $pkColumnName,
                '=',
                $pkValue
            )
            ->select();

        $data = $statement->fetch(PDO::FETCH_ASSOC);

        if (!$data) {
            throw new InvalidIDException(sprintf('id: %s does not exist', $pkValue));
        }

        foreach ($data as $key => $value) {
            $type = $this->getColumnType($statement, $data, $key);

            $modelPropertyName = array_search($key, $this->fields);

            if (!$modelPropertyName) {
                continue;
            }

            $this->{$modelPropertyName} = $this->castFromDatabaseToModel($type, $value);
        }

        return $this;
    }

    public function insert(): static
    {
        $insertableValues = $this->getFields(!$this->primaryKeyAutoGenerated);

        $query = $this->database->query()
            ->table($this->table)
            ->values($insertableValues);

        if ($this->primaryKeyAutoGenerated) {
            $primaryKeyColumnName = $this->getPrimaryKeyColumnName();
            $insertedId = $query->insertWithLastId($primaryKeyColumnName);

            $this->{$primaryKeyColumnName} = $insertedId;
        } else {
            $query->insert();
        }

        return $this;
    }

    public function update(): static
    {
        $updatableValues = $this->getFields(false);

        $pkColumnName = $this->getPrimaryKeyColumnName();
        $pkValue = $this->getPrimaryKeyValue();

        $this->database->query()
            ->table($this->table)
            ->values($updatableValues)
            ->where(
                $pkColumnName,
                '=',
                $pkValue
            )
            ->update();

        return $this;
    }

    public function delete(): static
    {
        $pkColumnName = $this->getPrimaryKeyColumnName();
        $pkValue = $this->getPrimaryKeyValue();

        $this->database->query()
            ->table($this->table)
            ->where(
                $pkColumnName,
                '=',
                $pkValue
            )
            ->delete();

        return $this;
    }

    public function undoDelete(): static
    {
        $insertableValues = $this->getFields(true);

        $this->database->query()
            ->table($this->table)
            ->values($insertableValues)
            ->insert();

        return $this;
    }

    public function createTable(): PDOStatement
    {
        $properties = [];

        foreach ($this->fields as $propertyName => $columnName) {
            $key = $columnName;
            $value = '';

            $reflectionProperty = new ReflectionProperty($this, $propertyName);

            $type = $reflectionProperty->getType()->getName();
            $defaultValue = $reflectionProperty->getDefaultValue();

            $columnType = Query::getDatabaseColumnType(
                $this->database,
                $type,
                ($propertyName == $this->primaryKeyPropertyName)
            );
            if (!$columnType) {
                continue;
            }

            $value .= $columnType;
            $value .= (is_null($defaultValue)) ? ' NULL' : ' NOT NULL';

            $properties[$key] = $value;
        }

        $statement = $this->database->query()
            ->table($this->table)
            ->properties($properties)
            ->primaryKey($this->getPrimaryKeyColumnName())
            ->primaryKeyAutoGenerated($this->primaryKeyAutoGenerated)
            ->create();

        return $statement;
    }

    public function getTable(): string
    {
        return $this->table;
    }

    public function getPrimaryKeyColumnName(): int|string
    {
        return $this->fields[$this->primaryKeyPropertyName];
    }

    public function getPrimaryKeyValue(): int|string
    {
        return $this->{$this->primaryKeyPropertyName};
    }

    protected function getFields($includePk = false): array
    {
        $values = [];

        foreach ($this->fields as $propertyName => $columnName) {
            if (
                (!$includePk)
                &&
                ($propertyName == $this->primaryKeyPropertyName)
            ) {
                continue;
            }

            if (!(new ReflectionProperty($this, $propertyName))->isInitialized($this)) {
                continue;
            }

            $key = $columnName;
            $value = $this->{$propertyName};

            if (is_null($value)) {
                continue;
            }

            $values[$key] = $this->castFromModelToDatabase($value);
        }

        return $values;
    }

    protected function getColumnType(PDOStatement $statement, array $data, string $key): ?string
    {
        $index = 0;
        foreach ($data as $columnName => $columnValue) {
            if ($columnName == $key) {
                return $statement->getColumnMeta($index)['native_type'];
            }

            $index++;
        }
    }

    protected function castFromDatabaseToModel(string $nativeType, mixed $value): mixed
    {
        if (is_null($value)) {
            return null;
        }

        if ($nativeType == 'DATETIME') {
            return DateTime::createFromFormat('Y-m-d H:i:s', $value);
        }

        if ($nativeType == 'TINY') {
            return ($value == 1);
        }

        return $value;
    }

    protected function castFromModelToDatabase(mixed $value): mixed
    {
        if ($value instanceof DateTime) {
            return $value->format('Y-m-d H:i:s');
        }

        if (is_bool($value)) {
            return ($value) ? 1 : 0;
        }

        return $value;
    }
}

?>